#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 08, 2018 06:16:18 PM

import sys
import firebase_access
import Ex_response

try:
    from Tkinter import *
except ImportError:
    from Tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ver2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Books_Database (root)
    ver2_support.init(root, top)
    root.mainloop()



w = None
def create_Books_Database(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Books_Database (w)
    ver2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Books_Database():
    global w
    w.destroy()
    w = None


class Books_Database:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#c2d856' # Closest X11 color: 'DarkOliveGreen2'
        _ana1color = '#ad56d8' # Closest X11 color: 'MediumOrchid3'
        _ana2color = '#5682d8' # Closest X11 color: 'SteelBlue3'
        font11 = "-family {Viner Hand ITC} -size 14 -weight normal "  \
            "-slant italic -underline 0 -overstrike 0"
        font12 = "-family {Segoe Script} -size 19 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.style.map('.',foreground=
            [('selected', 'black'), ('active','white')])

        top.geometry("1071x594+70+37")
        top.title("Books Database")
        top.configure(background="#33d82d")
        top.configure(highlightbackground="#6acdd8")
        top.configure(highlightcolor="black")

        ##############
        my_background_color = "#33d82d"
        ##############

        self.Label1 = Label(top)
        self.Label1.place(relx=0.08, rely=0.05, height=71, width=214)
        self.Label1.configure(activebackground="#f777e2")
        self.Label1.configure(activeforeground="black")
        #self.Label1.configure(background="#8359d8")
        self.Label1.configure(background=my_background_color)
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font12)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#6acdd8")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Book Search''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.0, rely=0.17, height=31, width=134)
        self.Label2.configure(activebackground="#9bebf8")
        self.Label2.configure(activeforeground="black")
        #self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(background=my_background_color)
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#6acdd8")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Name''')


        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.01, rely=0.22, relheight=0.04, relwidth=0.12)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.29, rely=0.40, height=45, width=110)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Book Search''')
        self.TButton1.configure(command=self.event_book_button)

        self.TButton2 = ttk.Button(top)
        self.TButton2.place(relx=0.68, rely=0.30, height=45, width=110)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Publication Search''')
        self.TButton2.configure(command=self.event_publication_button)


        self.TButton3 = ttk.Button(top)
        self.TButton3.place(relx=0.29, rely=0.79, height=45, width=110)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Author Search''')
        self.TButton3.configure(command=self.event_author_button)


        self.Label2_1 = Label(top)
        self.Label2_1.place(relx=0.13, rely=0.17, height=31, width=134)
        self.Label2_1.configure(activebackground="#9bebf8")
        self.Label2_1.configure(activeforeground="black")
        #self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(background=my_background_color)
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font=font11)
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#6acdd8")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''Resource''')

        self.Label2_2 = Label(top)
        self.Label2_2.place(relx=0.26, rely=0.17, height=31, width=134)
        self.Label2_2.configure(activebackground="#9bebf8")
        self.Label2_2.configure(activeforeground="black")
        #self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(background=my_background_color)
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(font=font11)
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#6acdd8")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Accessibility''')

        self.Label2_3 = Label(top)
        self.Label2_3.place(relx=0.0, rely=0.27, height=31, width=134)
        self.Label2_3.configure(activebackground="#9bebf8")
        self.Label2_3.configure(activeforeground="black")
        #self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(background=my_background_color)
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(font=font11)
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#6acdd8")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''Author''')

        self.Label2_4 = Label(top)
        self.Label2_4.place(relx=0.13, rely=0.27, height=31, width=134)
        self.Label2_4.configure(activebackground="#9bebf8")
        self.Label2_4.configure(activeforeground="black")
        #self.Label2_4.configure(background="#d9d9d9")
        self.Label2_4.configure(background=my_background_color)
        self.Label2_4.configure(disabledforeground="#a3a3a3")
        self.Label2_4.configure(font=font11)
        self.Label2_4.configure(foreground="#000000")
        self.Label2_4.configure(highlightbackground="#6acdd8")
        self.Label2_4.configure(highlightcolor="black")
        self.Label2_4.configure(text='''Publication''')

        self.Label2_5 = Label(top)
        self.Label2_5.place(relx=0.26, rely=0.27, height=31, width=134)
        self.Label2_5.configure(activebackground="#9bebf8")
        self.Label2_5.configure(activeforeground="black")
        #self.Label2_5.configure(background="#d9d9d9")
        self.Label2_5.configure(background=my_background_color)
        self.Label2_5.configure(disabledforeground="#a3a3a3")
        self.Label2_5.configure(font=font11)
        self.Label2_5.configure(foreground="#000000")
        self.Label2_5.configure(highlightbackground="#6acdd8")
        self.Label2_5.configure(highlightcolor="black")
        self.Label2_5.configure(text='''Subject''')

        self.Label2_6 = Label(top)
        self.Label2_6.place(relx=0.0, rely=0.37, height=31, width=134)
        self.Label2_6.configure(activebackground="#9bebf8")
        self.Label2_6.configure(activeforeground="black")
        #self.Label2_6.configure(background="#d9d9d9")
        self.Label2_6.configure(background=my_background_color)
        self.Label2_6.configure(disabledforeground="#a3a3a3")
        self.Label2_6.configure(font=font11)
        self.Label2_6.configure(foreground="#000000")
        self.Label2_6.configure(highlightbackground="#6acdd8")
        self.Label2_6.configure(highlightcolor="black")
        self.Label2_6.configure(text='''Field''')

        self.Label2_7 = Label(top)
        self.Label2_7.place(relx=0.13, rely=0.37, height=31, width=134)
        self.Label2_7.configure(activebackground="#9bebf8")
        self.Label2_7.configure(activeforeground="black")
        #self.Label2_7.configure(background="#d9d9d9")
        self.Label2_7.configure(background=my_background_color)
        self.Label2_7.configure(disabledforeground="#a3a3a3")
        self.Label2_7.configure(font=font11)
        self.Label2_7.configure(foreground="#000000")
        self.Label2_7.configure(highlightbackground="#6acdd8")
        self.Label2_7.configure(highlightcolor="black")
        self.Label2_7.configure(text='''View''')

        self.TEntry1_9 = ttk.Entry(top)
        self.TEntry1_9.place(relx=0.14, rely=0.22, relheight=0.04, relwidth=0.12)

        self.TEntry1_9.configure(takefocus="")
        self.TEntry1_9.configure(cursor="ibeam")

        self.TEntry1_10 = ttk.Entry(top)
        self.TEntry1_10.place(relx=0.27, rely=0.22, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_10.configure(takefocus="")
        self.TEntry1_10.configure(cursor="ibeam")

        self.TEntry1_11 = ttk.Entry(top)
        self.TEntry1_11.place(relx=0.01, rely=0.32, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_11.configure(takefocus="")
        self.TEntry1_11.configure(cursor="ibeam")

        self.TEntry1_12 = ttk.Entry(top)
        self.TEntry1_12.place(relx=0.14, rely=0.32, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_12.configure(takefocus="")
        self.TEntry1_12.configure(cursor="ibeam")

        self.TEntry1_13 = ttk.Entry(top)
        self.TEntry1_13.place(relx=0.27, rely=0.32, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_13.configure(takefocus="")
        self.TEntry1_13.configure(cursor="ibeam")

        self.TEntry1_8 = ttk.Entry(top)
        self.TEntry1_8.place(relx=0.01, rely=0.42, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_8.configure(takefocus="")
        self.TEntry1_8.configure(cursor="ibeam")

        self.TEntry1_15 = ttk.Entry(top)
        self.TEntry1_15.place(relx=0.14, rely=0.42, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_15.configure(takefocus="")
        self.TEntry1_15.configure(cursor="ibeam")

        self.Label1_1 = Label(top)
        self.Label1_1.place(relx=0.52, rely=0.05, height=71, width=264)
        self.Label1_1.configure(activebackground="#f777e2")
        self.Label1_1.configure(activeforeground="black")
        #self.Label1_1.configure(background="#8359d8")
        self.Label1_1.configure(background=my_background_color)
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font=font12)
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#6acdd8")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Publication Search''')
        self.Label1_1.configure(width=264)

        self.Label2_2 = Label(top)
        self.Label2_2.place(relx=0.5, rely=0.17, height=31, width=134)
        self.Label2_2.configure(activebackground="#9bebf8")
        self.Label2_2.configure(activeforeground="black")
        #self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(background=my_background_color)
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(font=font11)
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#6acdd8")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Name''')

        self.Label2_3 = Label(top)
        self.Label2_3.place(relx=0.65, rely=0.17, height=31, width=134)
        self.Label2_3.configure(activebackground="#9bebf8")
        self.Label2_3.configure(activeforeground="black")
        #self.Label2_3.configure(background="#d9d9d9")
        self.Label2_3.configure(background=my_background_color)
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(font=font11)
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#6acdd8")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''Address''')

        self.Label2_4 = Label(top)
        self.Label2_4.place(relx=0.5, rely=0.27, height=31, width=134)
        self.Label2_4.configure(activebackground="#9bebf8")
        self.Label2_4.configure(activeforeground="black")
        #self.Label2_4.configure(background="#d9d9d9")
        self.Label2_4.configure(background=my_background_color)
        self.Label2_4.configure(disabledforeground="#a3a3a3")
        self.Label2_4.configure(font=font11)
        self.Label2_4.configure(foreground="#000000")
        self.Label2_4.configure(highlightbackground="#6acdd8")
        self.Label2_4.configure(highlightcolor="black")
        self.Label2_4.configure(text='''Accuracy''')

        self.TEntry1_5 = ttk.Entry(top)
        self.TEntry1_5.place(relx=0.51, rely=0.22, relheight=0.04, relwidth=0.12)

        self.TEntry1_5.configure(takefocus="")
        self.TEntry1_5.configure(cursor="ibeam")

        self.TEntry1_6 = ttk.Entry(top)
        self.TEntry1_6.place(relx=0.66, rely=0.22, relheight=0.04, relwidth=0.12)

        self.TEntry1_6.configure(takefocus="")
        self.TEntry1_6.configure(cursor="ibeam")

        self.TEntry1_7 = ttk.Entry(top)
        self.TEntry1_7.place(relx=0.51, rely=0.32, relheight=0.04, relwidth=0.12)

        self.TEntry1_7.configure(takefocus="")
        self.TEntry1_7.configure(cursor="ibeam")

        self.Label1_8 = Label(top)
        self.Label1_8.place(relx=0.07, rely=0.51, height=71, width=214)
        self.Label1_8.configure(activebackground="#f777e2")
        self.Label1_8.configure(activeforeground="black")
        #self.Label1_8.configure(background="#8359d8")
        self.Label1_8.configure(background=my_background_color)
        self.Label1_8.configure(disabledforeground="#a3a3a3")
        self.Label1_8.configure(font=font12)
        self.Label1_8.configure(foreground="#000000")
        self.Label1_8.configure(highlightbackground="#6acdd8")
        self.Label1_8.configure(highlightcolor="black")
        self.Label1_8.configure(text='''Author Search''')

        self.Label2_9 = Label(top)
        self.Label2_9.place(relx=0.0, rely=0.64, height=31, width=134)
        self.Label2_9.configure(activebackground="#9bebf8")
        self.Label2_9.configure(activeforeground="black")
        #self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(background=my_background_color)
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font=font11)
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#6acdd8")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''Name''')

        self.Label2_10 = Label(top)
        self.Label2_10.place(relx=0.13, rely=0.64, height=31, width=134)
        self.Label2_10.configure(activebackground="#9bebf8")
        self.Label2_10.configure(activeforeground="black")
        #self.Label2_10.configure(background="#d9d9d9")
        self.Label2_10.configure(background=my_background_color)
        self.Label2_10.configure(disabledforeground="#a3a3a3")
        self.Label2_10.configure(font=font11)
        self.Label2_10.configure(foreground="#000000")
        self.Label2_10.configure(highlightbackground="#6acdd8")
        self.Label2_10.configure(highlightcolor="black")
        self.Label2_10.configure(text='''Country''')

        self.Label2_11 = Label(top)
        self.Label2_11.place(relx=0.26, rely=0.64, height=31, width=134)
        self.Label2_11.configure(activebackground="#9bebf8")
        self.Label2_11.configure(activeforeground="black")
        #self.Label2_11.configure(background="#d9d9d9")
        self.Label2_11.configure(background=my_background_color)
        self.Label2_11.configure(disabledforeground="#a3a3a3")
        self.Label2_11.configure(font=font11)
        self.Label2_11.configure(foreground="#000000")
        self.Label2_11.configure(highlightbackground="#6acdd8")
        self.Label2_11.configure(highlightcolor="black")
        self.Label2_11.configure(text='''Rav''')

        self.Label2_12 = Label(top)
        self.Label2_12.place(relx=0.0, rely=0.76, height=31, width=134)
        self.Label2_12.configure(activebackground="#9bebf8")
        self.Label2_12.configure(activeforeground="black")
        #self.Label2_12.configure(background="#d9d9d9")
        self.Label2_12.configure(background=my_background_color)
        self.Label2_12.configure(disabledforeground="#a3a3a3")
        self.Label2_12.configure(font=font11)
        self.Label2_12.configure(foreground="#000000")
        self.Label2_12.configure(highlightbackground="#6acdd8")
        self.Label2_12.configure(highlightcolor="black")
        self.Label2_12.configure(text='''Generation''')

        self.Label2_13 = Label(top)
        self.Label2_13.place(relx=0.13, rely=0.76, height=31, width=134)
        self.Label2_13.configure(activebackground="#9bebf8")
        self.Label2_13.configure(activeforeground="black")
        #self.Label2_13.configure(background="#d9d9d9")
        self.Label2_13.configure(background=my_background_color)
        self.Label2_13.configure(disabledforeground="#a3a3a3")
        self.Label2_13.configure(font=font11)
        self.Label2_13.configure(foreground="#000000")
        self.Label2_13.configure(highlightbackground="#6acdd8")
        self.Label2_13.configure(highlightcolor="black")
        self.Label2_13.configure(text='''Beit  midrash''')

        self.TEntry1_14 = ttk.Entry(top)
        self.TEntry1_14.place(relx=0.01, rely=0.69, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_14.configure(takefocus="")
        self.TEntry1_14.configure(cursor="ibeam")

        self.TEntry1_17 = ttk.Entry(top)
        self.TEntry1_17.place(relx=0.14, rely=0.69, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_17.configure(takefocus="")
        self.TEntry1_17.configure(cursor="ibeam")

        self.TEntry1_18 = ttk.Entry(top)
        self.TEntry1_18.place(relx=0.27, rely=0.69, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_18.configure(takefocus="")
        self.TEntry1_18.configure(cursor="ibeam")

        self.TEntry1_19 = ttk.Entry(top)
        self.TEntry1_19.place(relx=0.01, rely=0.81, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_19.configure(takefocus="")
        self.TEntry1_19.configure(cursor="ibeam")

        self.TEntry1_20 = ttk.Entry(top)
        self.TEntry1_20.place(relx=0.14, rely=0.81, relheight=0.04
                , relwidth=0.12)
        self.TEntry1_20.configure(takefocus="")
        self.TEntry1_20.configure(cursor="ibeam")

    def collect_entries_Book(self):
        book_name=self.TEntry1.get()
        book_resource=self.TEntry1_9.get()
        book_accessibility=self.TEntry1_10.get()
        book_author=self.TEntry1_11.get()
        book_publication=self.TEntry1_12.get()
        book_subject=self.TEntry1_13.get()
        book_field=self.TEntry1_8.get()
        book_view=self.TEntry1_15.get()
        list_book_var={'book name':book_name,'book resource':book_resource,'book accessibility':book_accessibility,'book author':book_author,'book publication':book_publication,'book subject':book_subject,'book field':book_field,'book view':book_view}
        list_with_values=[]
        for item in list_book_var:
            if list_book_var[item]:
                list_with_values.append([item,list_book_var[item]])

        return list_with_values

    def collect_entries_Author(self):
        author_name = self.TEntry1_14.get()
        author_bet_midrash = self.TEntry1_20.get()
        author_country = self.TEntry1_17.get()
        author_rav = self.TEntry1_18.get()
        author_generation = self.TEntry1_19.get()
        list_author_var = {'author name': author_name, 'author bet midrash': author_bet_midrash,
                         'author country': author_country, 'author rav': author_rav,
                         'author generation': author_generation}
        list_with_values = []
        for item in list_author_var:
            if list_author_var[item]:
                list_with_values.append([item, list_author_var[item]])

        return list_with_values


    def collect_entries_Publication(self):
        publication_name = self.TEntry1_5.get()
        publication_address = self.TEntry1_6.get()
        publication_accuracy = self.TEntry1_7.get()
        list_publication_var = {'publication name': publication_name, 'publication address': publication_address,
                         'publication accuracy': publication_accuracy}
        list_with_values = []
        for item in list_publication_var:
            if list_publication_var[item]:
                list_with_values.append([item, list_publication_var[item]])

        return list_with_values

    def response_win(self,result):
        if result == []:
            result=['Search empty']
            Ex_response.response_window(result)
        else:
            Ex_response.response_window(result)



    def event_book_button(self):
        str_var='book'
        list_book=[]
        list_book=self.collect_entries_Book()
        result=[]
        result=firebase_access.handle_gui_requests(str_var,list_book)
        self.response_win(result)

    def event_author_button(self):
        str_var='author'
        list_author=[]
        list_author=self.collect_entries_Author()
        result = []
        result = firebase_access.handle_gui_requests(str_var, list_author)
        self.response_win(result)

    def event_publication_button(self):
        str_var='publication'
        list_publication=[]
        list_publication=self.collect_entries_Publication()
        result = []
        result = firebase_access.handle_gui_requests(str_var, list_publication)
        self.response_win(result)


    def my_fun(self):
        #firebase_access.list_print(firebase_access.free_accessible_books())
        #book name
        print self.TEntry1.get()
        #publication name
        print self.TEntry1_5.get()
        #publication address
        print self.TEntry1_6.get()
        #publication accuracy
        print self.TEntry1_7.get()
        # book field
        print self.TEntry1_8.get() + '000'
        #book resource
        print self.TEntry1_9.get()
        #book accessibility
        print self.TEntry1_10.get()
        #book author
        print self.TEntry1_11.get()
        #book publication
        print self.TEntry1_12.get()
        #book subject
        print self.TEntry1_13.get()
        #author name
        print self.TEntry1_14.get()
        #book view
        print self.TEntry1_15.get()
        #author bet midrash
        print self.TEntry1_20.get()
        #author country
        print self.TEntry1_17.get()
        #author rav
        print self.TEntry1_18.get()
        #author generation
        print self.TEntry1_19.get()
        print '---------'

if __name__ == '__main__':
    vp_start_gui()



